generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model errsole_config {
  id    BigInt @id @default(autoincrement())
  key   String @unique @db.VarChar(255)
  value String
}

model errsole_notifications {
  id             BigInt    @id @default(autoincrement())
  errsole_id     BigInt?
  hostname       String?   @db.VarChar(255)
  hashed_message String?   @db.VarChar(255)
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  updated_at     DateTime? @default(now()) @db.Timestamptz(6)

  @@index([created_at], map: "idx_errsole_notifications_created_at")
  @@index([hostname, hashed_message, created_at], map: "idx_errsole_notifications_host_hashed_created")
  @@index([hostname, hashed_message, created_at], map: "idx_errsole_notifications_hostname_hashed_message_created_at")
  @@ignore
}

model errsole_users {
  id              BigInt  @id @default(autoincrement())
  name            String? @db.VarChar(255)
  email           String  @unique @db.VarChar(255)
  hashed_password String  @db.VarChar(255)
  role            String  @db.VarChar(255)

  @@ignore
}

model errsole_logs_v3 {
  id          BigInt                   @id @default(autoincrement())
  hostname    String?                  @db.VarChar(63)
  pid         Int?
  source      String?                  @db.VarChar(31)
  timestamp   DateTime?                @default(now()) @db.Timestamptz(6)
  level       String?                  @default("info") @db.VarChar(31)
  message     String?
  message_tsv Unsupported("tsvector")? @map("message_tsv")
  meta        String?
  errsole_id  BigInt?

  @@index([errsole_id], map: "idx_errsole_logs_v3_errsole_id")
  @@index([hostname], map: "idx_errsole_logs_v3_hostname")
  @@index([hostname, source, level, timestamp, id], map: "idx_errsole_logs_v3_hostname_source_level_timestamp_id")
  @@index([hostname, timestamp, id], map: "idx_errsole_logs_v3_hostname_timestamp_id")
  @@index([message_tsv], map: "idx_errsole_logs_v3_message_tsv", type: Gin)
  @@index([source, level, timestamp, id], map: "idx_errsole_logs_v3_source_level_timestamp_id")
  @@index([timestamp, id], map: "idx_errsole_logs_v3_timestamp_id")
  @@ignore
}

model Notification {
  id         Int      @id @default(autoincrement())
  uuid       String   @unique @default(uuid()) @db.Uuid
  title      String
  message    String
  json       Json?
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@map("notifications")
}

model User {
  id          Int      @id @default(autoincrement())
  uuid        String   @unique @default(uuid()) @db.Uuid
  name        String
  phonenumber String   @unique
  password    String
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())

  otps     Otp[]
  Tokens   Token[]
  articles Article[]

  @@map("users")
}

model Otp {
  id         Int      @id @default(autoincrement())
  user_id    Int
  otp        String
  type       String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@map("otps")
}

model Token {
  id           Int      @id @default(autoincrement())
  user_id      Int
  accessToken  String
  refreshToken String
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now())
  user         User     @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@map("tokens")
}

model ArticleCategory {
  id         Int      @id @default(autoincrement())
  uuid       String   @unique @default(uuid()) @db.Uuid
  name       String   @unique
  slug       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  articles Article[]

  @@map("article_categories")
}

model Article {
  id          Int      @id @default(autoincrement())
  uuid        String   @unique @default(uuid()) @db.Uuid
  user_id     Int
  category_id Int
  slug        String   @unique
  title       String
  content     String
  active      Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())

  category ArticleCategory @relation(fields: [category_id], references: [id])
  user     User            @relation(fields: [user_id], references: [id])

  images ArticleImage[]

  @@map("articles")
}

model ArticleImage {
  id         Int      @id @default(autoincrement())
  articleId  Int
  path       String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  article    Article  @relation(fields: [articleId], references: [id])

  @@index([articleId])
  @@map("article_images")
}
